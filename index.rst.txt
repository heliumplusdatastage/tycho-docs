.. Tycho documentation master file, created by
   sphinx-quickstart on Fri Jul 19 23:48:53 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to Tycho's documentation!
=================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Tycho is an API, compiler, and executor for cloud native distributed systems.

    * A subset of docker-compose is the system specification syntax.
    * Kubernetes is the first supported orchestrator.
Goals
=====

    * **Application Simplity**: The Kubernetes API is reliable, extensive, and well documented. It is also large, complex, supports a range of possibilities greater than many applications need, and often requires the creation and control of many objects to execute comparatively simple scenarios. Tycho bridges the simplicity of Compose to the richness of the Kubernetes' architecture.
    * **Microservice**: We wanted an end to end Python 12-factory style OpenAPI microservice that fits seamlessly into a Python ecosystem (which is why we did not use the excellent Kompose tool as a starting point).
    * **Lifecycle Management**: Tycho treats distributed systems as programs whose entire lifecycle can be programmatically managed via an API.
    * **Pluggable Orchestrators**: The Tycho compiler abstracts clients from the orchestrator. It creates an abstract syntax tree to model input systems and generates orchestrator specific artifacts.
    * **Policy**: Tycho anticipates incorporating a policy definition and enforcement layer to allow roles, network policy, and other concerns to be woven into a deployment.

      `GitHub <https://github.com/heliumplusdatastage/tycho>`_

Command Line Interface
======================

You can use Tycho from the command line to interact with the cluster.

Add the CLI tool to your path (if youve cloned the `repo <https://github.com/heliumplusdatastage/tycho>`_) with::

    export PATH=<repo>/bin:$PATH
       
Given this docker-compose.yaml: ::

  ---
  # Docker compose formatted system.
  version: "3"
  services:
    jupyter-datascience:
      image: jupyter/datascience-notebook
      entrypoint: start.sh jupyter lab --LabApp.token=
      ports:
        - 8888:8888

Deploy it with: ::

  $ tycho up -f docker-compose.yaml

Check its status with: ::

  $ tycho status

or::

  $ tycho status -terse

After a few moments, test the service with::

  $ mkip=$(minikube ip)
  $ wget --quiet -O- http://$mkip:$(tycho status | grep jupyter | grep -v PORT | awk '{ print $4 }') | grep "/title"
                         
And delete the service with: ::

  $ tycho down <GUID>

or delete all running services with::

  $ tycho down $(tycho status -terse)
      
Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
